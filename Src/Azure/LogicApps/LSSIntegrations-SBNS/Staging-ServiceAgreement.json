{
  "definition": {
      "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
      "actions": {
          "Select_sorted_props": {
              "type": "Select",
              "inputs": {
                  "from": "@triggerBody()",
                  "select": {
                      "sortKey": "@concat(item()?['correlationId'], '-', item()?['contentData']?['messageName'], '-', item()?['contentData']?['initiatedOn'], '-', item()?['contentData']?['document']?['new_serviceagreementid'])",
                      "originalItem": "@item()",
                      "messageId": "@item()?['messageId']",
                      "lockToken": "@item()?['lockToken']"
                  }
              },
              "runAfter": {}
          },
          "Order_the_messages": {
              "type": "Compose",
              "inputs": "@sort(body('Select_sorted_props'), 'sortKey')",
              "runAfter": {
                  "Select_sorted_props": [
                      "SUCCEEDED"
                  ]
              }
          },
          "For_Each_Message": {
              "type": "foreach",
              "foreach": "@outputs('Order_the_messages')",
              "actions": {
                  "Parse_JSON": {
                      "type": "ParseJson",
                      "inputs": {
                          "content": "@item()?['originalItem']",
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "contentData": {
                                      "type": "object",
                                      "properties": {
                                          "initiatedOn": {
                                              "type": "integer"
                                          },
                                          "messageName": {
                                              "type": "string"
                                          },
                                          "logLevel": {
                                              "type": "string"
                                          },
                                          "document": {
                                              "type": "object",
                                              "properties": {}
                                          }
                                      },
                                      "required": [
                                          "initiatedOn",
                                          "messageName",
                                          "logLevel",
                                          "document"
                                      ]
                                  },
                                  "contentType": {
                                      "type": "string"
                                  },
                                  "messageId": {
                                      "type": "string"
                                  },
                                  "scheduledEnqueueTimeUtc": {
                                      "type": "string"
                                  },
                                  "sessionId": {
                                      "type": "string"
                                  },
                                  "correlationId": {
                                      "type": "string"
                                  },
                                  "timeToLive": {
                                      "type": "string"
                                  },
                                  "deliveryCount": {
                                      "type": "integer"
                                  },
                                  "enqueuedSequenceNumber": {
                                      "type": "integer"
                                  },
                                  "enqueuedTimeUtc": {
                                      "type": "string"
                                  },
                                  "lockedUntilUtc": {
                                      "type": "string"
                                  },
                                  "sequenceNumber": {
                                      "type": "integer"
                                  },
                                  "userProperties": {
                                      "type": "object",
                                      "properties": {
                                          "request-Id": {
                                              "type": "string"
                                          }
                                      }
                                  },
                                  "lockToken": {
                                      "type": "string"
                                  }
                              },
                              "required": [
                                  "contentData",
                                  "messageId",
                                  "sessionId",
                                  "correlationId",
                                  "deliveryCount",
                                  "sequenceNumber"
                              ]
                          }
                      }
                  },
                  "Event_messageName": {
                      "type": "Switch",
                      "expression": "@body('Parse_JSON')?['contentData']?['messageName']",
                      "default": {
                          "actions": {}
                      },
                      "cases": {
                          "Create": {
                              "actions": {
                                  "Insert_row": {
                                      "type": "ServiceProvider",
                                      "inputs": {
                                          "parameters": {
                                              "tableName": "[stg].[new_serviceagreement]",
                                              "setColumns": "@outputs('Build_the_Action_Body')?['body']"
                                          },
                                          "serviceProviderConfiguration": {
                                              "connectionName": "sql-6",
                                              "operationId": "insertRow",
                                              "serviceProviderId": "/serviceProviders/sql"
                                          }
                                      }
                                  }
                              },
                              "case": "Create"
                          },
                          "Update": {
                              "actions": {
                                  "Condition": {
                                      "type": "If",
                                      "expression": {
                                          "and": [
                                              {
                                                  "equals": [
                                                      "@outputs('Build_the_Action_Body')?['hasUpdates']",
                                                      "@true"
                                                  ]
                                              }
                                          ]
                                      },
                                      "actions": {
                                          "Update_rows": {
                                              "type": "ServiceProvider",
                                              "inputs": {
                                                  "parameters": {
                                                      "tableName": "[stg].[new_serviceagreement]",
                                                      "setColumns": "@outputs('Build_the_Action_Body')?['body']",
                                                      "columnValuesForWhereCondition": {
                                                          "new_serviceagreementid": "@{body('Parse_JSON')['contentData']['document']?['new_serviceagreementid']}"
                                                      }
                                                  },
                                                  "serviceProviderConfiguration": {
                                                      "connectionName": "sql-6",
                                                      "operationId": "updateRows",
                                                      "serviceProviderId": "/serviceProviders/sql"
                                                  }
                                              }
                                          }
                                      },
                                      "else": {
                                          "actions": {}
                                      }
                                  }
                              },
                              "case": "Update"
                          },
                          "Delete": {
                              "actions": {
                                  "Delete_rows": {
                                      "type": "ServiceProvider",
                                      "inputs": {
                                          "parameters": {
                                              "tableName": "[stg].[new_serviceagreement]",
                                              "columnValuesForWhereCondition": "@outputs('Build_the_Action_Body')?['body']"
                                          },
                                          "serviceProviderConfiguration": {
                                              "connectionName": "sql-6",
                                              "operationId": "deleteRows",
                                              "serviceProviderId": "/serviceProviders/sql"
                                          }
                                      }
                                  }
                              },
                              "case": "Delete"
                          }
                      },
                      "runAfter": {
                          "Build_the_Action_Body": [
                              "SUCCEEDED"
                          ]
                      }
                  },
                  "Complete_the_message_in_a_session": {
                      "type": "ServiceProvider",
                      "inputs": {
                          "parameters": {
                              "messageId": "@items('For_Each_Message')?['messageId']",
                              "lockToken": "@items('For_Each_Message')?['lockToken']"
                          },
                          "serviceProviderConfiguration": {
                              "connectionName": "serviceBus",
                              "operationId": "completeMessageInSession",
                              "serviceProviderId": "/serviceProviders/serviceBus"
                          }
                      },
                      "runAfter": {
                          "Event_messageName": [
                              "SUCCEEDED"
                          ]
                      }
                  },
                  "Build_the_Action_Body": {
                      "type": "JavaScriptCode",
                      "inputs": {
                          "code": "const body = workflowContext.actions.Parse_JSON.outputs.body;\nif (!body) throw new Error(\"No body found in the Parse_JSON action\");\n\nconst source = body.contentData.document;\nif (!source) throw new Error(\"No document found in the body\");\n\nconst messageName = body.contentData.messageName;\n\nconst primaryIdAttr = \"new_serviceagreementid\";\n\nif (messageName === \"Delete\") {\n  return {\n    hasUpdates: true,\n    body: {\n      [primaryIdAttr]: source[primaryIdAttr]\n    }\n  };\n}\n\nconst tableColumns = [\n  \"Modifiedon\",\n  \"new_AgreementEndDate\",\n  \"new_billtoaccountid\",\n  \"new_billtoaccountidname\",\n  \"new_clientid\",\n  \"new_clientidName\",\n  \"new_name\",\n  \"new_Program\",\n  \"new_programname\",\n  \"new_ProviderNumber\",\n  \"new_ProviderNumberName\",\n  \"new_StartDate\",\n  \"new_StateServiceAgreementID\",\n  \"new_totalremaining\",\n  \"new_totalremainingFormatted\",\n  \"owneridname\",\n  \"pics_BusinessModel\",\n  \"pics_BusinessModelName\",\n  \"pics_clientpmi\",\n  \"pics_CompanyId\",\n  \"pics_CompanyIdName\",\n  \"pics_DiagnosisCode_ICD10\",\n  \"pics_DiagnosisCode_ICD9\",\n  \"pics_InsuredID\",\n  \"pics_ProviderNumberDescription\",\n  \"pics_ServicingCountyId\",\n  \"pics_ServicingCountyIdName\",\n  \"pics_specificwaivername\",\n  \"statuscode\",\n  \"statuscodeName\"\n].map(n => n.toLowerCase());\n\nfunction isValueString(value) {\n  return typeof value === \"string\" || value instanceof String;\n}\n\nfunction isValueBoolean(value) {\n  return typeof value === \"boolean\" || value instanceof Boolean;\n}\n\nfunction isStringDate(dateString) {\n  return !isNaN(Date.parse(dateString));\n}\n\nfunction formatDateStringToSql(dateString) {\n  return dateString.replace(\"Z\", \"\").replace(/\\.\\d+/, \"\");\n}\n\nfunction parseValueSQLString(value) {\n  if (isValueString(value)) {\n    if (value.includes(\"'\")) {\n      value = value.replace(/'/g, \"''\");\n    }\n\n    if (isStringDate(value)) {\n      value = formatDateStringToSql(value);\n    }\n\n    return value === null || value === undefined ? \"null\" : value.toString();\n  }\n\n  if (isValueBoolean(value)) {\n    return value ? \"1\" : \"0\";\n  }\n\n  return value === null || value === undefined ? \"null\" : value.toString();\n}\n\n// Only include primary ID in the body object if the message is not \"Update\"\nif (messageName !== \"Update\") tableColumns.push(primaryIdAttr);\n\nconst sourceKeys = Object.keys(source);\n\nconst result = sourceKeys.reduce((acc, colName) => {\n  if (!tableColumns.includes(colName)) return acc;\n\n  acc[colName] = parseValueSQLString(source[colName]);\n  return acc;\n}, {});\n\nreturn {\n  body: result,\n  hasUpdates: messageName !== \"Update\" || Object.keys(result).length > 0\n};"
                      },
                      "runAfter": {
                          "Parse_JSON": [
                              "SUCCEEDED"
                          ]
                      }
                  }
              },
              "runAfter": {
                  "Order_the_messages": [
                      "SUCCEEDED"
                  ]
              }
          }
      },
      "contentVersion": "1.0.0.0",
      "outputs": {},
      "triggers": {
          "On_new_messages_from_Entity_staging_queue_session": {
              "type": "ServiceProvider",
              "kind": "Polling",
              "inputs": {
                  "parameters": {
                      "queueName": "staging-dataverse-entity",
                      "sessionId": "new_serviceagreement",
                      "maxMessages": 10
                  },
                  "serviceProviderConfiguration": {
                      "connectionName": "serviceBus",
                      "operationId": "onNewMessagesFromQueueSession",
                      "serviceProviderId": "/serviceProviders/serviceBus"
                  }
              },
              "recurrence": {
                  "interval": 5,
                  "frequency": "Second",
                  "timeZone": "Mountain Standard Time",
                  "startTime": "2025-3-19T11:00:00"
              },
              "runtimeConfiguration": {
                  "concurrency": {
                      "runs": 1
                  }
              }
          }
      }
  },
  "kind": "Stateful"
}